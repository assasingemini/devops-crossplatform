version: 0.2
env:
  shell: powershell
  variables:
    IMAGE_REPO_NAME: "windows-app"
    ECR_REGION: "us-east-1"

phases:
  pre_build:
    commands:
      - 'Write-Host "=== PRE_BUILD: Resolve AWS context ==="'
      - '$ACCOUNT_ID = (aws sts get-caller-identity --query Account --output text)'
      - '$REGION = if ($env:ECR_REGION) { $env:ECR_REGION } else { $env:AWS_DEFAULT_REGION }'
      - '$ECR_URI = "$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"'
      - 'Write-Host "Account=$ACCOUNT_ID  Region=$REGION"'
      - 'Write-Host "Registry=$ECR_URI  Repo=$env:IMAGE_REPO_NAME"'
      - |-
        Write-Host "Ensure ECR repository exists..."
        aws ecr describe-repositories --repository-names $env:IMAGE_REPO_NAME --region $REGION | Out-Null
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Repo not found. Creating..."
          aws ecr create-repository --repository-name $env:IMAGE_REPO_NAME --region $REGION | Out-Null
          if ($LASTEXITCODE -ne 0) { throw "Failed to create ECR repo $($env:IMAGE_REPO_NAME) in $REGION" }
        }

      - 'Write-Host "Login ECR..."'
      - 'docker logout $ECR_URI | Out-Null'

      # Cách mới (CLI v2): KHÔNG có --registry-ids
      - '$pw = aws ecr get-login-password --region $REGION'
      - 'if ($pw) { $pw | docker login --username AWS --password-stdin $ECR_URI }'

      # Fallback nếu trên lỗi (ví dụ 400 Bad Request): dùng get-authorization-token + registry-ids
      - 'if ($LASTEXITCODE -ne 0) {'
      - '  Write-Host "New login failed -> fallback to get-authorization-token"'
      - '  $auth = aws ecr get-authorization-token --region $REGION --registry-ids $ACCOUNT_ID --output text --query "authorizationData[].authorizationToken"'
      - '  $proxy = aws ecr get-authorization-token --region $REGION --registry-ids $ACCOUNT_ID --output text --query "authorizationData[].proxyEndpoint"'
      - '  $proxy = $proxy -replace "^https://",""'
      - '  $decoded = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($auth))'  # "AWS:<password>"
      - '  $parts = $decoded.Split(":",2)'
      - '  $user = $parts[0]; $pass = $parts[1]'
      - '  $pass | docker login --username $user --password-stdin $proxy'
      - '}'
      - 'if ($LASTEXITCODE -ne 0) { throw "ECR login failed (both methods)" }'

  build:
    commands:
      - 'Write-Host "=== BUILD: Docker build & tag ==="'
      - 'docker build -f Dockerfile.windows -t $env:IMAGE_REPO_NAME:latest .'
      - 'docker tag $env:IMAGE_REPO_NAME:latest "$ECR_URI/$($env:IMAGE_REPO_NAME):latest"'
      - 'docker tag $env:IMAGE_REPO_NAME:latest "$ECR_URI/$($env:IMAGE_REPO_NAME):$env:CODEBUILD_RESOLVED_SOURCE_VERSION"'

  post_build:
    commands:
      - 'Write-Host "=== POST_BUILD: Push images ==="'
      - 'docker push "$ECR_URI/$($env:IMAGE_REPO_NAME):latest"'
      - 'docker push "$ECR_URI/$($env:IMAGE_REPO_NAME):$env:CODEBUILD_RESOLVED_SOURCE_VERSION"'
