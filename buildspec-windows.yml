version: 0.2
env:
  shell: powershell
  variables:
    IMAGE_REPO_NAME: "windows-app"
    ECR_REGION: "ap-southeast-1"

phases:
  pre_build:
    commands:
      - '$ErrorActionPreference = "Stop"'
      - 'Write-Host "=== PRE_BUILD: Resolve AWS context ==="'
      - '$ACCOUNT_ID = (aws sts get-caller-identity --query Account --output text)'
      - '$REGION = if ($env:ECR_REGION) { $env:ECR_REGION } else { $env:AWS_DEFAULT_REGION }'
      - '$ECR_URI = "$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"'
      - 'Write-Host "Account=$ACCOUNT_ID  Region=$REGION"'
      - 'Write-Host "Registry=$ECR_URI  Repo=$env:IMAGE_REPO_NAME"'
      - 'Write-Host "Ensure ECR repository exists..."'
      - '$null = aws ecr describe-repositories --repository-names $env:IMAGE_REPO_NAME --region $REGION 2>$null'
      - 'if ($LASTEXITCODE -ne 0) { Write-Host "Repo not found. Creating..."; $null = aws ecr create-repository --repository-name $env:IMAGE_REPO_NAME --region $REGION }'
      - 'Write-Host "Login ECR..."'
      - 'docker logout $ECR_URI | Out-Null'
      - '$pw = aws ecr get-login-password --region $REGION'
      - 'if (-not $pw) { throw "Failed to get ECR login password for region $REGION" }'
      - '$pw | docker login --username AWS --password-stdin $ECR_URI'
      - 'if ($LASTEXITCODE -ne 0) { throw "ECR login failed for $ECR_URI" }'

  build:
    commands:
      - 'Write-Host "=== BUILD: Docker build & tag ==="'
      - 'docker build -f Dockerfile.windows -t $env:IMAGE_REPO_NAME:latest .'
      - 'docker tag $env:IMAGE_REPO_NAME:latest "$ECR_URI/$($env:IMAGE_REPO_NAME):latest"'
      - 'docker tag $env:IMAGE_REPO_NAME:latest "$ECR_URI/$($env:IMAGE_REPO_NAME):$env:CODEBUILD_RESOLVED_SOURCE_VERSION"'

  post_build:
    commands:
      - 'Write-Host "=== POST_BUILD: Push images ==="'
      - 'docker push "$ECR_URI/$($env:IMAGE_REPO_NAME):latest"'
      - 'docker push "$ECR_URI/$($env:IMAGE_REPO_NAME):$env:CODEBUILD_RESOLVED_SOURCE_VERSION"'
